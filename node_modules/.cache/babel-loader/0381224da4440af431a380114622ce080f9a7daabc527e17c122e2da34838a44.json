{"ast":null,"code":"/**\n * @file Handler file for choosing the correct version of ONNX Runtime, based on the environment.\n * Ideally, we could import the `onnxruntime-web` and `onnxruntime-node` packages only when needed,\n * but dynamic imports don't seem to work with the current webpack version and/or configuration.\n * This is possibly due to the experimental nature of top-level await statements.\n * So, we just import both packages, and use the appropriate one based on the environment:\n *   - When running in node, we use `onnxruntime-node`.\n *   - When running in the browser, we use `onnxruntime-web` (`onnxruntime-node` is not bundled).\n * \n * This module is not directly exported, but can be accessed through the environment variables:\n * ```javascript\n * import { env } from '@xenova/transformers';\n * console.log(env.backends.onnx);\n * ```\n * \n * @module backends/onnx\n */\n\n// NOTE: Import order matters here. We need to import `onnxruntime-node` before `onnxruntime-web`.\n// In either case, we select the default export if it exists, otherwise we use the named export.\nimport * as ONNX_NODE from 'onnxruntime-node';\nimport * as ONNX_WEB from 'onnxruntime-web';\n\n/** @type {import('onnxruntime-web')} The ONNX runtime module. */\nexport let ONNX;\nexport const executionProviders = [\n// 'webgpu',\n'wasm'];\nif (typeof process !== 'undefined' && process?.release?.name === 'node') {\n  // Running in a node-like environment.\n  ONNX = ONNX_NODE.default ?? ONNX_NODE;\n\n  // Add `cpu` execution provider, with higher precedence that `wasm`.\n  executionProviders.unshift('cpu');\n} else {\n  // Running in a browser-environment\n  ONNX = ONNX_WEB.default ?? ONNX_WEB;\n\n  // SIMD for WebAssembly does not operate correctly in some recent versions of iOS (16.4.x).\n  // As a temporary fix, we disable it for now.\n  // For more information, see: https://github.com/microsoft/onnxruntime/issues/15644\n  const isIOS = typeof navigator !== 'undefined' && /iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent);\n  if (isIOS) {\n    ONNX.env.wasm.simd = false;\n  }\n}","map":{"version":3,"names":["ONNX_NODE","ONNX_WEB","ONNX","executionProviders","process","release","name","default","unshift","isIOS","navigator","test","userAgent","env","wasm","simd"],"sources":["/Users/lorryrio/Project/calico/node_modules/@xenova/transformers/src/backends/onnx.js"],"sourcesContent":["/**\n * @file Handler file for choosing the correct version of ONNX Runtime, based on the environment.\n * Ideally, we could import the `onnxruntime-web` and `onnxruntime-node` packages only when needed,\n * but dynamic imports don't seem to work with the current webpack version and/or configuration.\n * This is possibly due to the experimental nature of top-level await statements.\n * So, we just import both packages, and use the appropriate one based on the environment:\n *   - When running in node, we use `onnxruntime-node`.\n *   - When running in the browser, we use `onnxruntime-web` (`onnxruntime-node` is not bundled).\n * \n * This module is not directly exported, but can be accessed through the environment variables:\n * ```javascript\n * import { env } from '@xenova/transformers';\n * console.log(env.backends.onnx);\n * ```\n * \n * @module backends/onnx\n */\n\n// NOTE: Import order matters here. We need to import `onnxruntime-node` before `onnxruntime-web`.\n// In either case, we select the default export if it exists, otherwise we use the named export.\nimport * as ONNX_NODE from 'onnxruntime-node';\nimport * as ONNX_WEB from 'onnxruntime-web';\n\n/** @type {import('onnxruntime-web')} The ONNX runtime module. */\nexport let ONNX;\n\nexport const executionProviders = [\n    // 'webgpu',\n    'wasm'\n];\n\nif (typeof process !== 'undefined' && process?.release?.name === 'node') {\n    // Running in a node-like environment.\n    ONNX = ONNX_NODE.default ?? ONNX_NODE;\n\n    // Add `cpu` execution provider, with higher precedence that `wasm`.\n    executionProviders.unshift('cpu');\n\n} else {\n    // Running in a browser-environment\n    ONNX = ONNX_WEB.default ?? ONNX_WEB;\n\n    // SIMD for WebAssembly does not operate correctly in some recent versions of iOS (16.4.x).\n    // As a temporary fix, we disable it for now.\n    // For more information, see: https://github.com/microsoft/onnxruntime/issues/15644\n    const isIOS = typeof navigator !== 'undefined' && /iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent);\n    if (isIOS) {\n        ONNX.env.wasm.simd = false;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,KAAKA,SAAS,MAAM,kBAAkB;AAC7C,OAAO,KAAKC,QAAQ,MAAM,iBAAiB;;AAE3C;AACA,OAAO,IAAIC,IAAI;AAEf,OAAO,MAAMC,kBAAkB,GAAG;AAC9B;AACA,MAAM,CACT;AAED,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,EAAEC,OAAO,EAAEC,IAAI,KAAK,MAAM,EAAE;EACrE;EACAJ,IAAI,GAAGF,SAAS,CAACO,OAAO,IAAIP,SAAS;;EAErC;EACAG,kBAAkB,CAACK,OAAO,CAAC,KAAK,CAAC;AAErC,CAAC,MAAM;EACH;EACAN,IAAI,GAAGD,QAAQ,CAACM,OAAO,IAAIN,QAAQ;;EAEnC;EACA;EACA;EACA,MAAMQ,KAAK,GAAG,OAAOC,SAAS,KAAK,WAAW,IAAI,mCAAmC,CAACC,IAAI,CAACD,SAAS,CAACE,SAAS,CAAC;EAC/G,IAAIH,KAAK,EAAE;IACPP,IAAI,CAACW,GAAG,CAACC,IAAI,CAACC,IAAI,GAAG,KAAK;EAC9B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}