{"ast":null,"code":"/**\n * @file Core utility functions/classes for Transformers.js.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/core\n */\n\n/**\n * Helper function to dispatch progress callbacks.\n *\n * @param {Function} progress_callback The progress callback function to dispatch.\n * @param {any} data The data to pass to the progress callback function.\n * @returns {void}\n * @private\n */\nexport function dispatchCallback(progress_callback, data) {\n  if (progress_callback) progress_callback(data);\n}\n\n/**\n * Reverses the keys and values of an object.\n *\n * @param {Object} data The object to reverse.\n * @returns {Object} The reversed object.\n * @see https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n */\nexport function reverseDictionary(data) {\n  // https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n  return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n}\n\n/**\n * Escapes regular expression special characters from a string by replacing them with their escaped counterparts.\n *\n * @param {string} string The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * A base class for creating callable objects.\n * \n * @type {new () => {(...args: any[]): any, _call(...args: any[]): any}}\n */\nexport const Callable = /** @type {any} */class {\n  /**\n  * Creates a new instance of the Callable class.\n  */\n  constructor() {\n    /**\n     * Creates a closure that delegates to a private method '_call' with the given arguments.\n     * @type {any}\n     * @param {...any} args Zero or more arguments to pass to the '_call' method.\n     * @returns {*} The result of calling the '_call' method.\n     */\n    let closure = function (...args) {\n      return closure._call(...args);\n    };\n    return Object.setPrototypeOf(closure, new.target.prototype);\n  }\n\n  /**\n   * This method should be implemented in subclasses to provide the\n   * functionality of the callable object.\n   *\n   * @param {any[]} args\n   * @throws {Error} If the subclass does not implement the `_call` method.\n   */\n  _call(...args) {\n    throw Error('Must implement _call method in subclass');\n  }\n};\n\n/**\n * Check if a value is a typed array.\n * @param {*} val The value to check.\n * @returns {boolean} True if the value is a `TypedArray`, false otherwise.\n * \n * Adapted from https://stackoverflow.com/a/71091338/13989043\n */\nexport function isTypedArray(val) {\n  return val?.prototype?.__proto__?.constructor?.name === 'TypedArray';\n}\n\n/**\n * Check if a value is an integer.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isIntegralNumber(x) {\n  return Number.isInteger(x) || typeof x === 'bigint';\n}\n\n/**\n * Check if a value is exists.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value exists, false otherwise.\n */\nexport function exists(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * Calculates the dimensions of a nested array.\n *\n * @param {any[]} arr The nested array to calculate dimensions for.\n * @returns {number[]} An array containing the dimensions of the input array.\n */\nexport function calculateDimensions(arr) {\n  const dimensions = [];\n  let current = arr;\n  while (Array.isArray(current)) {\n    dimensions.push(current.length);\n    current = current[0];\n  }\n  return dimensions;\n}\n\n/**\n * Replicate python's .pop() method for objects.\n * @param {Object} obj The object to pop from.\n * @param {string} key The key to pop.\n * @param {*} defaultValue The default value to return if the key does not exist.\n * @returns {*} The value of the popped key.\n * @throws {Error} If the key does not exist and no default value is provided.\n */\nexport function pop(obj, key, defaultValue = undefined) {\n  const value = obj[key];\n  if (value !== undefined) {\n    delete obj[key];\n    return value;\n  }\n  if (defaultValue === undefined) {\n    throw Error(`Key ${key} does not exist in object.`);\n  }\n  return defaultValue;\n}\n\n/**\n * Efficiently merge arrays, creating a new copy.\n * Adapted from https://stackoverflow.com/a/6768642/13989043\n * @param  {Array[]} arrs Arrays to merge.\n * @returns {Array} The merged array.\n */\nexport function mergeArrays(...arrs) {\n  return Array.prototype.concat.apply([], arrs);\n}\n\n/**\n * Compute the Cartesian product of given arrays\n * @param {...Array} a Arrays to compute the product\n * @returns {Array} Returns the computed Cartesian product as an array\n * @private\n */\nexport function product(...a) {\n  // Cartesian product of items\n  // Adapted from https://stackoverflow.com/a/43053803\n  return a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e])));\n}\n\n/**\n * Calculates the index offset for a given index and window size.\n * @param {number} i The index.\n * @param {number} w The window size.\n * @returns {number} The index offset.\n */\nexport function calculateReflectOffset(i, w) {\n  return Math.abs((i + w) % (2 * w) - w);\n}","map":{"version":3,"names":["dispatchCallback","progress_callback","data","reverseDictionary","Object","fromEntries","entries","map","key","value","escapeRegExp","string","replace","Callable","constructor","closure","args","_call","setPrototypeOf","new","target","prototype","Error","isTypedArray","val","__proto__","name","isIntegralNumber","x","Number","isInteger","exists","undefined","calculateDimensions","arr","dimensions","current","Array","isArray","push","length","pop","obj","defaultValue","mergeArrays","arrs","concat","apply","product","a","reduce","b","flatMap","d","e","calculateReflectOffset","i","w","Math","abs"],"sources":["/workspaces/calico/node_modules/@xenova/transformers/src/utils/core.js"],"sourcesContent":["\n/**\n * @file Core utility functions/classes for Transformers.js.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/core\n */\n\n/**\n * Helper function to dispatch progress callbacks.\n *\n * @param {Function} progress_callback The progress callback function to dispatch.\n * @param {any} data The data to pass to the progress callback function.\n * @returns {void}\n * @private\n */\nexport function dispatchCallback(progress_callback, data) {\n    if (progress_callback) progress_callback(data);\n}\n\n/**\n * Reverses the keys and values of an object.\n *\n * @param {Object} data The object to reverse.\n * @returns {Object} The reversed object.\n * @see https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n */\nexport function reverseDictionary(data) {\n    // https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n}\n\n/**\n * Escapes regular expression special characters from a string by replacing them with their escaped counterparts.\n *\n * @param {string} string The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * A base class for creating callable objects.\n * \n * @type {new () => {(...args: any[]): any, _call(...args: any[]): any}}\n */\nexport const Callable = /** @type {any} */ (class {\n    /**\n    * Creates a new instance of the Callable class.\n    */\n    constructor() {\n        /**\n         * Creates a closure that delegates to a private method '_call' with the given arguments.\n         * @type {any}\n         * @param {...any} args Zero or more arguments to pass to the '_call' method.\n         * @returns {*} The result of calling the '_call' method.\n         */\n        let closure = function (...args) {\n            return closure._call(...args)\n        }\n        return Object.setPrototypeOf(closure, new.target.prototype)\n    }\n\n    /**\n     * This method should be implemented in subclasses to provide the\n     * functionality of the callable object.\n     *\n     * @param {any[]} args\n     * @throws {Error} If the subclass does not implement the `_call` method.\n     */\n    _call(...args) {\n        throw Error('Must implement _call method in subclass')\n    }\n});\n\n/**\n * Check if a value is a typed array.\n * @param {*} val The value to check.\n * @returns {boolean} True if the value is a `TypedArray`, false otherwise.\n * \n * Adapted from https://stackoverflow.com/a/71091338/13989043\n */\nexport function isTypedArray(val) {\n    return val?.prototype?.__proto__?.constructor?.name === 'TypedArray';\n}\n\n\n/**\n * Check if a value is an integer.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isIntegralNumber(x) {\n    return Number.isInteger(x) || typeof x === 'bigint'\n}\n\n/**\n * Check if a value is exists.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value exists, false otherwise.\n */\nexport function exists(x) {\n    return x !== undefined && x !== null;\n}\n\n/**\n * Calculates the dimensions of a nested array.\n *\n * @param {any[]} arr The nested array to calculate dimensions for.\n * @returns {number[]} An array containing the dimensions of the input array.\n */\nexport function calculateDimensions(arr) {\n    const dimensions = [];\n    let current = arr;\n    while (Array.isArray(current)) {\n        dimensions.push(current.length);\n        current = current[0];\n    }\n    return dimensions;\n}\n\n/**\n * Replicate python's .pop() method for objects.\n * @param {Object} obj The object to pop from.\n * @param {string} key The key to pop.\n * @param {*} defaultValue The default value to return if the key does not exist.\n * @returns {*} The value of the popped key.\n * @throws {Error} If the key does not exist and no default value is provided.\n */\nexport function pop(obj, key, defaultValue = undefined) {\n    const value = obj[key];\n    if (value !== undefined) {\n        delete obj[key];\n        return value;\n    }\n    if (defaultValue === undefined) {\n        throw Error(`Key ${key} does not exist in object.`)\n    }\n    return defaultValue;\n}\n\n/**\n * Efficiently merge arrays, creating a new copy.\n * Adapted from https://stackoverflow.com/a/6768642/13989043\n * @param  {Array[]} arrs Arrays to merge.\n * @returns {Array} The merged array.\n */\nexport function mergeArrays(...arrs) {\n    return Array.prototype.concat.apply([], arrs);\n}\n\n/**\n * Compute the Cartesian product of given arrays\n * @param {...Array} a Arrays to compute the product\n * @returns {Array} Returns the computed Cartesian product as an array\n * @private\n */\nexport function product(...a) {\n    // Cartesian product of items\n    // Adapted from https://stackoverflow.com/a/43053803\n    return a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e])));\n}\n\n/**\n * Calculates the index offset for a given index and window size.\n * @param {number} i The index.\n * @param {number} w The window size.\n * @returns {number} The index offset.\n */\nexport function calculateReflectOffset(i, w) {\n    return Math.abs((i + w) % (2 * w) - w);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}